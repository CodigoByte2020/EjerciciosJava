/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package clases;

import javax.swing.JOptionPane;

/**
 *
 * @author ANTHONY
 */
public class InterfazPrincipal extends javax.swing.JFrame {

    /**
     * Creates new form InterfazPrincipal
     */
    public InterfazPrincipal() {
        initComponents();
        setLocationRelativeTo(null);
        txtExpresión.setText("3*(7-6)-{3*7}-[6-3]");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        txtExpresión = new javax.swing.JTextField();
        btnValidarExpresión = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        txtExpresión.setFont(new java.awt.Font("Cambria", 1, 24)); // NOI18N

        btnValidarExpresión.setText("VALIDAR EXPRESIÓN");
        btnValidarExpresión.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnValidarExpresiónActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(29, 29, 29)
                        .addComponent(txtExpresión, javax.swing.GroupLayout.PREFERRED_SIZE, 375, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(123, 123, 123)
                        .addComponent(btnValidarExpresión, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(33, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(txtExpresión, javax.swing.GroupLayout.DEFAULT_SIZE, 49, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnValidarExpresión)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnValidarExpresiónActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnValidarExpresiónActionPerformed
        //Si ValidarExpresión devuelve un true, expresión correcta        
        if (ValidarExpresión()) {
            JOptionPane.showMessageDialog(null, "La expresión es correcta");
        } else {
            JOptionPane.showMessageDialog(null, "ERROR, La expresión es incorrecta");
        }
    }//GEN-LAST:event_btnValidarExpresiónActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(InterfazPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(InterfazPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(InterfazPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(InterfazPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new InterfazPrincipal().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnValidarExpresión;
    private javax.swing.JTextField txtExpresión;
    // End of variables declaration//GEN-END:variables

    public boolean ValidarExpresión() {
        ListaTipoPila pila = new ListaTipoPila();
        float emparejamientos = 0, inserciónes = 0;
        String cadena = txtExpresión.getText();

        //Insertamos en la lista los caracteres a validar de la expresión
        for (int i = 0; i < cadena.length(); i++) {
            if (cadena.charAt(i) == '(' || cadena.charAt(i) == '[' || cadena.charAt(i) == '{' || cadena.charAt(i) == ')' || cadena.charAt(i) == ']' || cadena.charAt(i) == '}') {
                pila.Insertar(cadena.charAt(i));
                inserciónes++;
            }
        }

        /*Cada vez que hay un signo de cierre, lo eliminamos y también el siguiente, y si es el signo de apertura que le corresponde,
        aumentamos un emparejamiento*/
        for (int i = cadena.length() - 1; i >= 0; i--) {
            if (cadena.charAt(i) == ')') {
                pila.Eliminar();
                if (pila.Eliminar() == '(') {
                    emparejamientos++;
                }
            } else if (cadena.charAt(i) == ']') {
                pila.Eliminar();
                if (pila.Eliminar() == '[') {
                    emparejamientos++;
                }
            } else if (cadena.charAt(i) == '}') {
                pila.Eliminar();
                if (pila.Eliminar() == '{') {
                    emparejamientos++;
                }
            }
        }
        return inserciónes / 2 == emparejamientos; //Si inserciones es el doble de emparejamientos, devuelve un true
    }
}
